name: Promote

on:
  workflow_dispatch:
    inputs:
      target_stage:
        description: 'Target stage (DEV, QA, STAGING, PROD)'
        required: true
        type: choice
        options:
          - DEV
          - QA
          - STAGING
          - PROD
      app_version:
        description: 'Application version (SemVer). If empty, use latest.'
        required: false
        type: string
      dry_run:
        description: 'Do not change artifacts, only print actions'
        required: false
        type: boolean
        default: false

jobs:
  promote:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup JFrog CLI
        uses: jfrog/setup-jfrog-cli@v4
        env:
          JF_URL: ${{ vars.JFROG_URL }}
          JF_PROJECT: ${{ vars.PROJECT_KEY }}
        with:
          version: latest
          oidc-provider-name: github-bookverse-checkout
          disable-job-summary: false
          oidc-audience: jfrog-github

      - name: Configure JFrog CLI (admin)
        run: |
          jf c add bookverse-admin --interactive=false --url "${{ vars.JFROG_URL }}" --access-token "${{ secrets.JFROG_ADMIN_TOKEN }}"
          jf c use bookverse-admin
          jf c show

      - name: Determine application and version
        id: app
        run: |
          set -euo pipefail
          SERVICE_NAME=checkout
          APPLICATION_KEY="bookverse-$SERVICE_NAME"
          TARGET_STAGE='${{ inputs.target_stage }}'
          APP_VERSION='${{ inputs.app_version }}'
          if [ -z "$APP_VERSION" ]; then
            RESP=$(curl -sS -H "Authorization: Bearer ${{ secrets.JFROG_ADMIN_TOKEN }}" -H "Accept: application/json" \
              "${{ vars.JFROG_URL }}/apptrust/api/v1/applications/$APPLICATION_KEY/versions?limit=1&order_by=created&order_asc=false")
            APP_VERSION=$(echo "$RESP" | jq -r '.versions[0].version // empty')
          fi
          if [ -z "$APP_VERSION" ] || [ "$APP_VERSION" = "null" ]; then
            echo "❌ Could not determine app version for $APPLICATION_KEY" >&2
            exit 1
          fi
          echo "application_key=$APPLICATION_KEY" >> $GITHUB_OUTPUT
          echo "app_version=$APP_VERSION" >> $GITHUB_OUTPUT
          echo "target_stage=$TARGET_STAGE" >> $GITHUB_OUTPUT
          echo "Resolved: $APPLICATION_KEY@$APP_VERSION → $TARGET_STAGE"

      - name: Initialize AppTrust context
        run: |
          set -euo pipefail
          echo "APPLICATION_KEY=${{ steps.app.outputs.application_key }}" >> $GITHUB_ENV
          echo "APP_VERSION=${{ steps.app.outputs.app_version }}" >> $GITHUB_ENV
          echo "TARGET_STAGE=${{ steps.app.outputs.target_stage }}" >> $GITHUB_ENV

      - name: Promote to non-PROD stage (AppTrust)
        if: ${{ steps.app.outputs.target_stage != 'PROD' }}
        run: |
          set -euo pipefail
          APPLICATION_KEY='${{ steps.app.outputs.application_key }}'
          APP_VERSION='${{ steps.app.outputs.app_version }}'
          TARGET_STAGE='${{ steps.app.outputs.target_stage }}'
          if [ "$TARGET_STAGE" = "PROD" ]; then echo "❌ Non-PROD step invoked with PROD" >&2; exit 1; fi
          API_STAGE="${{ vars.PROJECT_KEY }}-$TARGET_STAGE"
          BODY=$(cat << JSON
          {"target_stage": "$API_STAGE", "promotion_type": "move"}
          JSON
          )
          echo "Promoting $APPLICATION_KEY@$APP_VERSION to $TARGET_STAGE"
          if [ "${{ inputs.dry_run }}" = "true" ]; then
            echo "(dry-run) Would POST promote"
          else
            STATUS=$(curl -sS -o /dev/null -w "%{http_code}" -X POST \
              "${{ vars.JFROG_URL }}/apptrust/api/v1/applications/$APPLICATION_KEY/versions/$APP_VERSION/promote?async=false" \
              -H "Authorization: Bearer ${{ secrets.JFROG_ADMIN_TOKEN }}" \
              -H "Content-Type: application/json" \
              -d "$BODY")
            echo "HTTP $STATUS"
            if [ "$STATUS" -lt 200 ] || [ "$STATUS" -ge 300 ]; then
              echo "❌ Promotion API failed" >&2
              exit 1
            fi
          fi

      - name: Promote to PROD (AppTrust Release)
        if: ${{ steps.app.outputs.target_stage == 'PROD' }}
        run: |
          set -euo pipefail
          APP_KEY="${{ steps.app.outputs.application_key }}"
          APP_VER="${{ steps.app.outputs.app_version }}"
          echo "Releasing $APP_KEY@$APP_VER to PROD via AppTrust"
          if [ "${{ inputs.dry_run }}" = "true" ]; then
            echo "(dry-run) Would POST release"
          else
            BODY='{"promotion_type":"copy"}'
            STATUS=$(curl -sS -o /dev/null -w "%{http_code}" -X POST \
              "${{ vars.JFROG_URL }}/apptrust/api/v1/applications/${APP_KEY}/versions/${APP_VER}/release?async=false" \
              -H "Authorization: Bearer ${{ secrets.JFROG_ADMIN_TOKEN }}" \
              -H "X-JFrog-Project: ${{ vars.PROJECT_KEY }}" \
              -H "Content-Type: application/json" \
              -d "$BODY")
            echo "HTTP $STATUS"
            if [ "$STATUS" -lt 200 ] || [ "$STATUS" -ge 300 ]; then
              echo "❌ Release API failed" >&2
              exit 1
            fi
          fi

